ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : vbl.s
Current file: vbl.s

000000r 1               ;
000000r 1               ;  vbl.s
000000r 1               ;  a2bejwld
000000r 1               ;
000000r 1               ;  Created by Jeremy Rand on 2016-07-22.
000000r 1               ;  Copyright Â© 2016 Jeremy Rand. All rights reserved.
000000r 1               ;
000000r 1               
000000r 1               
000000r 1               
000000r 1                   .export _vblWait, _vblWait2c, _vblInit2gs
000000r 1                   .export _vblIRQCallback
000000r 1               
000000r 1               
000000r 1                   .include "apple2.inc"
000000r 2               
000000r 2               ;-----------------------------------------------------------------------------
000000r 2               ; Zero page stuff
000000r 2               
000000r 2               WNDLFT  :=      $20	; Text window left
000000r 2               WNDWDTH :=      $21	; Text window width
000000r 2               WNDTOP  :=      $22	; Text window top
000000r 2               WNDBTM  :=      $23	; Text window bottom+1
000000r 2               CH      :=      $24	; Cursor horizontal position
000000r 2               CV      :=      $25	; Cursor vertical position
000000r 2               BASL    :=      $28	; Text base address low
000000r 2               BASH    :=      $29	; Text base address high
000000r 2               INVFLG  :=      $32	; Normal/inverse(/flash)
000000r 2               PROMPT  :=      $33	; Used by GETLN
000000r 2               RNDL    :=      $4E	; Random counter low
000000r 2               RNDH    :=      $4F	; Random counter high
000000r 2               HIMEM   :=      $73	; Highest available memory address+1
000000r 2               
000000r 2               ;-----------------------------------------------------------------------------
000000r 2               ; Vectors
000000r 2               
000000r 2               DOSWARM :=      $03D0	; DOS warmstart vector
000000r 2               BRKVec  :=      $03F0	; Break vector
000000r 2               SOFTEV  :=      $03F2	; Vector for warm start
000000r 2               PWREDUP :=      $03F4	; This must be = EOR #$A5 of SOFTEV+1
000000r 2               
000000r 2               ;-----------------------------------------------------------------------------
000000r 2               ; Hardware
000000r 2               
000000r 2               ; Keyboard input
000000r 2               KBD     :=      $C000	; Read keyboard
000000r 2               KBDSTRB :=      $C010	; Clear keyboard strobe
000000r 2               
000000r 2               ; 80 column video switches
000000r 2               CLR80COL:=      $C000	; Disable 80 column store
000000r 2               SET80COL:=      $C001	; Enable 80 column store
000000r 2               RD80COL	:=	$C018	; >127 if 80 column store enabled
000000r 2               RD80VID :=      $C01F   ; >127 if 80 column video enabled
000000r 2               
000000r 2               ; Character set switches
000000r 2               CLRALTCHAR :=   $C00E   ; Normal Apple II char set
000000r 2               SETALTCHAR :=   $C00F   ; Norm/inv LC, no flash
000000r 2               ALTCHARSET :=   $C01E   ; >127 if alt charset switched in
000000r 2               
000000r 2               ; Language card switches
000000r 2               RDLCBNK2 :=	$C011	; >127 if LC bank 2 in use
000000r 2               RDLCRAM	:=	$C012	; >127 if LC is read enabled
000000r 2               ROMIN	:=	$C081	; Swap in D000-FFFF ROM
000000r 2               LCBANK2	:=	$C083	; Swap in LC bank 2
000000r 2               LCBANK1	:=	$C08B	; Swap in LC bank 1
000000r 2               
000000r 2               ; Video mode switches
000000r 2               TXTCLR	:=	$C050	; Display graphics
000000r 2               TXTSET	:=	$C051	; Display text
000000r 2               MIXCLR  :=      $C052	; Disable 4 lines of text
000000r 2               MIXSET  :=      $C053	; Enable 4 lines of text
000000r 2               LOWSCR  :=      $C054	; Page 1
000000r 2               HISCR   :=      $C055	; Page 2
000000r 2               LORES   :=	$C056	; Lores graphics
000000r 2               HIRES   :=	$C057	; Hires graphics
000000r 2               
000000r 2               ; Game controller
000000r 2               BUTN0   :=      $C061	; Open-Apple Key
000000r 2               BUTN1   :=      $C062	; Closed-Apple Key
000000r 2               
000000r 1               
000000r 1               
000000r 1               RDVBLBAR      :=  $C019
000000r 1               
000000r 1               
000000r 1               .proc _vblInit2gs
000000r 1  A9 FE            lda #$fe
000002r 1  8D rr rr         sta compType
000005r 1               .endproc
000005r 1               
000005r 1               
000005r 1               .proc _vblWait
000005r 1  AD rr rr         lda   compType
000008r 1               @L1:
000008r 1  CD 19 C0         cmp   RDVBLBAR
00000Br 1  10 FB            bpl   @L1
00000Dr 1               @L2:
00000Dr 1  CD 19 C0         cmp   RDVBLBAR
000010r 1  30 FB            bmi   @L2
000012r 1               
000012r 1  60               rts
000013r 1               .endproc
000013r 1               
000013r 1               
000013r 1               .proc _vblIRQCallback
000013r 1  9C rr rr         stz vbl2cByte
000016r 1  60               rts
000017r 1               .endproc
000017r 1               
000017r 1               
000017r 1               .proc _vblWait2c
000017r 1  A9 FF            lda #$ff
000019r 1  8D rr rr         sta vbl2cByte
00001Cr 1               
00001Cr 1               @L1:
00001Cr 1  AD rr rr         lda vbl2cByte
00001Fr 1  D0 FB            bne @L1
000021r 1               
000021r 1  60               rts
000022r 1               .endproc
000022r 1               
000022r 1               
000022r 1               .data
000000r 1               
000000r 1               compType:
000000r 1  7E               .BYTE   $7e
000001r 1               
000001r 1               vbl2cByte:
000001r 1  00               .BYTE   $00
000001r 1               
