ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : dbllores.s
Current file: dbllores.s

000000r 1               ;
000000r 1               ;  dbllores.s
000000r 1               ;  a2bejwld
000000r 1               ;
000000r 1               ;  Created by Jeremy Rand on 2016-07-20.
000000r 1               ;  Copyright Â© 2016 Jeremy Rand. All rights reserved.
000000r 1               ;
000000r 1               
000000r 1                   .export _showDblLoRes, _clearDblLoRes, _unshowDblLoRes
000000r 1                   .export _mixedTextMode
000000r 1               
000000r 1                   .export _drawGem, _drawBgSquare
000000r 1                   .export _drawScore, _selectSquare, _starGem
000000r 1               
000000r 1                   .export _drawGemAtXY, _drawAndStarGemAtXY
000000r 1               
000000r 1                   .export _explodeGemFrame1, _explodeGemFrame2
000000r 1                   .export _explodeGemFrame3, _explodeGemFrame4
000000r 1                   .export _explodeGemFrame5, _explodeGemFrame6
000000r 1               
000000r 1                   .include "apple2.inc"
000000r 2               
000000r 2               ;-----------------------------------------------------------------------------
000000r 2               ; Zero page stuff
000000r 2               
000000r 2               WNDLFT  :=      $20	; Text window left
000000r 2               WNDWDTH :=      $21	; Text window width
000000r 2               WNDTOP  :=      $22	; Text window top
000000r 2               WNDBTM  :=      $23	; Text window bottom+1
000000r 2               CH      :=      $24	; Cursor horizontal position
000000r 2               CV      :=      $25	; Cursor vertical position
000000r 2               BASL    :=      $28	; Text base address low
000000r 2               BASH    :=      $29	; Text base address high
000000r 2               INVFLG  :=      $32	; Normal/inverse(/flash)
000000r 2               PROMPT  :=      $33	; Used by GETLN
000000r 2               RNDL    :=      $4E	; Random counter low
000000r 2               RNDH    :=      $4F	; Random counter high
000000r 2               HIMEM   :=      $73	; Highest available memory address+1
000000r 2               
000000r 2               ;-----------------------------------------------------------------------------
000000r 2               ; Vectors
000000r 2               
000000r 2               DOSWARM :=      $03D0	; DOS warmstart vector
000000r 2               BRKVec  :=      $03F0	; Break vector
000000r 2               SOFTEV  :=      $03F2	; Vector for warm start
000000r 2               PWREDUP :=      $03F4	; This must be = EOR #$A5 of SOFTEV+1
000000r 2               
000000r 2               ;-----------------------------------------------------------------------------
000000r 2               ; Hardware
000000r 2               
000000r 2               ; Keyboard input
000000r 2               KBD     :=      $C000	; Read keyboard
000000r 2               KBDSTRB :=      $C010	; Clear keyboard strobe
000000r 2               
000000r 2               ; 80 column video switches
000000r 2               CLR80COL:=      $C000	; Disable 80 column store
000000r 2               SET80COL:=      $C001	; Enable 80 column store
000000r 2               RD80COL	:=	$C018	; >127 if 80 column store enabled
000000r 2               RD80VID :=      $C01F   ; >127 if 80 column video enabled
000000r 2               
000000r 2               ; Character set switches
000000r 2               CLRALTCHAR :=   $C00E   ; Normal Apple II char set
000000r 2               SETALTCHAR :=   $C00F   ; Norm/inv LC, no flash
000000r 2               ALTCHARSET :=   $C01E   ; >127 if alt charset switched in
000000r 2               
000000r 2               ; Language card switches
000000r 2               RDLCBNK2 :=	$C011	; >127 if LC bank 2 in use
000000r 2               RDLCRAM	:=	$C012	; >127 if LC is read enabled
000000r 2               ROMIN	:=	$C081	; Swap in D000-FFFF ROM
000000r 2               LCBANK2	:=	$C083	; Swap in LC bank 2
000000r 2               LCBANK1	:=	$C08B	; Swap in LC bank 1
000000r 2               
000000r 2               ; Video mode switches
000000r 2               TXTCLR	:=	$C050	; Display graphics
000000r 2               TXTSET	:=	$C051	; Display text
000000r 2               MIXCLR  :=      $C052	; Disable 4 lines of text
000000r 2               MIXSET  :=      $C053	; Enable 4 lines of text
000000r 2               LOWSCR  :=      $C054	; Page 1
000000r 2               HISCR   :=      $C055	; Page 2
000000r 2               LORES   :=	$C056	; Lores graphics
000000r 2               HIRES   :=	$C057	; Hires graphics
000000r 2               
000000r 2               ; Game controller
000000r 2               BUTN0   :=      $C061	; Open-Apple Key
000000r 2               BUTN1   :=      $C062	; Closed-Apple Key
000000r 2               
000000r 1               
000000r 1               SETAN3      :=  $C05E
000000r 1               SET80VID    :=  $C00D
000000r 1               
000000r 1               LINE1       :=  $400
000000r 1               LINE2       :=  $480
000000r 1               LINE3       :=  $500
000000r 1               LINE4       :=  $580
000000r 1               LINE5       :=  $600
000000r 1               LINE6       :=  $680
000000r 1               LINE7       :=  $700
000000r 1               LINE8       :=  $780
000000r 1               LINE9       :=  $428
000000r 1               LINE10      :=  $4a8
000000r 1               LINE11      :=  $528
000000r 1               LINE12      :=  $5a8
000000r 1               LINE13      :=  $628
000000r 1               LINE14      :=  $6a8
000000r 1               LINE15      :=  $728
000000r 1               LINE16      :=  $7a8
000000r 1               LINE17      :=  $450
000000r 1               LINE18      :=  $4d0
000000r 1               LINE19      :=  $550
000000r 1               LINE20      :=  $5d0
000000r 1               LINE21      :=  $650
000000r 1               LINE22      :=  $6d0
000000r 1               LINE23      :=  $750
000000r 1               LINE24      :=  $7d0
000000r 1               
000000r 1               
000000r 1               ; I get a linker error with this so I am hard coding some ZP addresses instead
000000r 1               ;.ZEROPAGE
000000r 1               ;line1addr:  .WORD $0
000000r 1               ;line2addr:  .WORD $0
000000r 1               ;line3addr:  .WORD $0
000000r 1               ;gemmask:    .WORD $0
000000r 1               
000000r 1               line1addr   := $82
000000r 1               line2addr   := $84
000000r 1               line3addr   := $86
000000r 1               gemmask     := $88
000000r 1               
000000r 1               .CODE
000000r 1               
000000r 1               .proc _showDblLoRes
000000r 1  A9 00            lda #0
000002r 1  85 20            sta WNDLFT
000004r 1  A9 50            lda #80
000006r 1  85 21            sta WNDWDTH
000008r 1  A9 00            lda #0
00000Ar 1  85 22            sta WNDTOP
00000Cr 1  A9 18            lda #24
00000Er 1  85 23            sta WNDBTM
000010r 1               
000010r 1  AD 50 C0         lda TXTCLR
000013r 1  AD 52 C0         lda MIXCLR
000016r 1  AD 5E C0         lda SETAN3
000019r 1  8D 0D C0         sta SET80VID
00001Cr 1  8D 01 C0         sta SET80COL
00001Fr 1  60               rts
000020r 1               .endproc
000020r 1               
000020r 1               
000020r 1               .proc _unshowDblLoRes
000020r 1  AD 51 C0         lda TXTSET
000023r 1  60               rts
000024r 1               .endproc
000024r 1               
000024r 1               
000024r 1               .proc _mixedTextMode
000024r 1  AD 53 C0         lda MIXSET
000027r 1  8D 54 C0         sta LOWSCR
00002Ar 1  A2 28            ldx #40
00002Cr 1  A9 A0            lda #$a0
00002Er 1               @L1:
00002Er 1  CA               dex
00002Fr 1  9D 50 06         sta LINE21, X
000032r 1  9D D0 06         sta LINE22, X
000035r 1  9D 50 07         sta LINE23, X
000038r 1  9D D0 07         sta LINE24, X
00003Br 1  E0 00            cpx #0
00003Dr 1  D0 EF            bne @L1
00003Fr 1               
00003Fr 1  8D 55 C0         sta HISCR
000042r 1  A2 28            ldx #40
000044r 1               @L2:
000044r 1  CA               dex
000045r 1  9D 50 06         sta LINE21, X
000048r 1  9D D0 06         sta LINE22, X
00004Br 1  9D 50 07         sta LINE23, X
00004Er 1  9D D0 07         sta LINE24, X
000051r 1  E0 00            cpx #0
000053r 1  D0 EF            bne @L2
000055r 1               
000055r 1  A9 00            lda #0
000057r 1  85 20            sta WNDLFT
000059r 1  A9 50            lda #80
00005Br 1  85 21            sta WNDWDTH
00005Dr 1  A9 14            lda #20
00005Fr 1  85 22            sta WNDTOP
000061r 1  A9 18            lda #24
000063r 1  85 23            sta WNDBTM
000065r 1               
000065r 1  60               rts
000066r 1               .endproc
000066r 1               
000066r 1               
000066r 1               .proc _clearDblLoRes
000066r 1  8D 54 C0         sta LOWSCR
000069r 1  A2 28            ldx #40
00006Br 1               @L1:
00006Br 1  CA               dex
00006Cr 1  9E 00 04         stz LINE1, X
00006Fr 1  9E 80 04         stz LINE2, X
000072r 1  9E 00 05         stz LINE3, X
000075r 1  9E 80 05         stz LINE4, X
000078r 1  9E 00 06         stz LINE5, X
00007Br 1  9E 80 06         stz LINE6, X
00007Er 1  9E 00 07         stz LINE7, X
000081r 1  9E 80 07         stz LINE8, X
000084r 1  9E 28 04         stz LINE9, X
000087r 1  9E A8 04         stz LINE10, X
00008Ar 1  9E 28 05         stz LINE11, X
00008Dr 1  9E A8 05         stz LINE12, X
000090r 1  9E 28 06         stz LINE13, X
000093r 1  9E A8 06         stz LINE14, X
000096r 1  9E 28 07         stz LINE15, X
000099r 1  9E A8 07         stz LINE16, X
00009Cr 1  9E 50 04         stz LINE17, X
00009Fr 1  9E D0 04         stz LINE18, X
0000A2r 1  9E 50 05         stz LINE19, X
0000A5r 1  9E D0 05         stz LINE20, X
0000A8r 1  9E 50 06         stz LINE21, X
0000ABr 1  9E D0 06         stz LINE22, X
0000AEr 1  9E 50 07         stz LINE23, X
0000B1r 1  9E D0 07         stz LINE24, X
0000B4r 1  D0 B5            bne @L1
0000B6r 1               
0000B6r 1  8D 55 C0         sta HISCR
0000B9r 1  A2 28            ldx #40
0000BBr 1               @L2:
0000BBr 1  CA               dex
0000BCr 1  9E 00 04         stz LINE1, X
0000BFr 1  9E 80 04         stz LINE2, X
0000C2r 1  9E 00 05         stz LINE3, X
0000C5r 1  9E 80 05         stz LINE4, X
0000C8r 1  9E 00 06         stz LINE5, X
0000CBr 1  9E 80 06         stz LINE6, X
0000CEr 1  9E 00 07         stz LINE7, X
0000D1r 1  9E 80 07         stz LINE8, X
0000D4r 1  9E 28 04         stz LINE9, X
0000D7r 1  9E A8 04         stz LINE10, X
0000DAr 1  9E 28 05         stz LINE11, X
0000DDr 1  9E A8 05         stz LINE12, X
0000E0r 1  9E 28 06         stz LINE13, X
0000E3r 1  9E A8 06         stz LINE14, X
0000E6r 1  9E 28 07         stz LINE15, X
0000E9r 1  9E A8 07         stz LINE16, X
0000ECr 1  9E 50 04         stz LINE17, X
0000EFr 1  9E D0 04         stz LINE18, X
0000F2r 1  9E 50 05         stz LINE19, X
0000F5r 1  9E D0 05         stz LINE20, X
0000F8r 1  9E 50 06         stz LINE21, X
0000FBr 1  9E D0 06         stz LINE22, X
0000FEr 1  9E 50 07         stz LINE23, X
000101r 1  9E D0 07         stz LINE24, X
000104r 1  D0 B5            bne @L2
000106r 1               
000106r 1  60               rts
000107r 1               .endproc
000107r 1               
000107r 1               
000107r 1               .proc _drawBgSquare
000107r 1               ; A is the square position (from 0 to 63)
000107r 1               ; 0 through 7 are on the top row
000107r 1  AA               tax
000108r 1  BD rr rr         lda bgColor,X
00010Br 1  8D rr rr         sta color
00010Er 1  BD rr rr         lda bgAuxColor,X
000111r 1  8D rr rr         sta colorAux
000114r 1               
000114r 1  8A               txa
000115r 1  8D rr rr         sta square
000118r 1               
000118r 1  29 07            and #7
00011Ar 1  8D rr rr         sta xPos
00011Dr 1  AD rr rr         lda square
000120r 1  4A               lsr
000121r 1  4A               lsr
000122r 1  4A               lsr
000123r 1               
000123r 1               ; Get line addrs
000123r 1  AA               tax
000124r 1  BD rr rr         lda bgLoLines1,X
000127r 1  85 82            sta line1addr
000129r 1  BD rr rr         lda bgHiLines1,X
00012Cr 1  85 83            sta line1addr+1
00012Er 1               
00012Er 1  BD rr rr         lda bgLoLines2,X
000131r 1  85 84            sta line2addr
000133r 1  BD rr rr         lda bgHiLines2,X
000136r 1  85 85            sta line2addr+1
000138r 1               
000138r 1  BD rr rr         lda bgLoLines3,X
00013Br 1  85 86            sta line3addr
00013Dr 1  BD rr rr         lda bgHiLines3,X
000140r 1  85 87            sta line3addr+1
000142r 1               
000142r 1               ; Write the square
000142r 1  AD rr rr         lda xPos
000145r 1  0A               asl
000146r 1  0A               asl
000147r 1  A8               tay
000148r 1  A2 04            ldx #4
00014Ar 1               @L1:
00014Ar 1  AD rr rr         lda color
00014Dr 1  8D 54 C0         sta LOWSCR
000150r 1  91 82            sta (line1addr),Y
000152r 1  91 84            sta (line2addr),Y
000154r 1  91 86            sta (line3addr),Y
000156r 1               
000156r 1  AD rr rr         lda colorAux
000159r 1  8D 55 C0         sta HISCR
00015Cr 1  91 82            sta (line1addr),Y
00015Er 1  91 84            sta (line2addr),Y
000160r 1  91 86            sta (line3addr),Y
000162r 1               
000162r 1  C8               iny
000163r 1  CA               dex
000164r 1  D0 E4            bne @L1
000166r 1               
000166r 1               
000166r 1  60               rts
000167r 1               ; Locals
000167r 1               
000167r 1  00           xPos:       .BYTE $0
000168r 1  00           square:     .BYTE $0
000169r 1  00           color:      .BYTE $0
00016Ar 1  00           colorAux:   .BYTE $0
00016Br 1               .endproc
00016Br 1               
00016Br 1               
00016Br 1               .proc _drawGemAtXY
00016Br 1  8E rr rr         stx xPos
00016Er 1  C9 00            cmp #0
000170r 1  10 08            bpl @L8
000172r 1  4A               lsr
000173r 1  09 80            ora #$80
000175r 1  AA               tax
000176r 1  90 12            bcc @L3
000178r 1  80 04            bra @L9
00017Ar 1               
00017Ar 1               @L8:
00017Ar 1  4A               lsr
00017Br 1  AA               tax
00017Cr 1  90 0C            bcc @L3
00017Er 1               
00017Er 1               @L9:
00017Er 1  B9 rr rr         lda maskLoAddrs2,Y
000181r 1  85 88            sta gemmask
000183r 1  B9 rr rr         lda maskHiAddrs2,Y
000186r 1  85 89            sta gemmask+1
000188r 1  80 0A            bra @L4
00018Ar 1               
00018Ar 1               @L3:
00018Ar 1  B9 rr rr         lda maskLoAddrs,Y
00018Dr 1  85 88            sta gemmask
00018Fr 1  B9 rr rr         lda maskHiAddrs,Y
000192r 1  85 89            sta gemmask+1
000194r 1               
000194r 1               @L4:
000194r 1  B9 rr rr         lda gemColours,Y
000197r 1  8D rr rr         sta gemColour
00019Ar 1  B9 rr rr         lda gemAuxColours,Y
00019Dr 1  8D rr rr         sta gemAuxColour
0001A0r 1               
0001A0r 1  9C rr rr         stz isAux
0001A3r 1  AD rr rr         lda xPos
0001A6r 1  4A               lsr
0001A7r 1  8D rr rr         sta xPos
0001AAr 1  B0 05            bcs @L5
0001ACr 1  A9 01            lda #1
0001AEr 1  8D rr rr         sta isAux
0001B1r 1               
0001B1r 1               @L5:
0001B1r 1               ; Get line addrs
0001B1r 1  E8               inx
0001B2r 1  E8               inx
0001B3r 1  BD rr rr         lda fakeLineLoAddrs,X
0001B6r 1  18               clc
0001B7r 1  6D rr rr         adc xPos
0001BAr 1  85 82            sta line1addr
0001BCr 1  BD rr rr         lda fakeLineHiAddrs,X
0001BFr 1  85 83            sta line1addr+1
0001C1r 1               
0001C1r 1  E8               inx
0001C2r 1  BD rr rr         lda fakeLineLoAddrs,X
0001C5r 1  18               clc
0001C6r 1  6D rr rr         adc xPos
0001C9r 1  85 84            sta line2addr
0001CBr 1  BD rr rr         lda fakeLineHiAddrs,X
0001CEr 1  85 85            sta line2addr+1
0001D0r 1               
0001D0r 1  E8               inx
0001D1r 1  BD rr rr         lda fakeLineLoAddrs,X
0001D4r 1  18               clc
0001D5r 1  6D rr rr         adc xPos
0001D8r 1  85 86            sta line3addr
0001DAr 1  BD rr rr         lda fakeLineHiAddrs,X
0001DDr 1  85 87            sta line3addr+1
0001DFr 1               
0001DFr 1                   ; Draw the gem
0001DFr 1  A0 00            ldy #0
0001E1r 1  A2 08            ldx #8
0001E3r 1               @L1:
0001E3r 1               
0001E3r 1  AD rr rr         lda isAux
0001E6r 1  F0 44            beq @L6
0001E8r 1               
0001E8r 1  8D 55 C0         sta HISCR
0001EBr 1  B2 82            lda (line1addr)
0001EDr 1  31 88            and (gemmask),Y
0001EFr 1  8D rr rr         sta square
0001F2r 1  B1 88            lda (gemmask),Y
0001F4r 1  49 FF            eor #$ff
0001F6r 1  2D rr rr         and gemAuxColour
0001F9r 1  0D rr rr         ora square
0001FCr 1  92 82            sta (line1addr)
0001FEr 1  C8               iny
0001FFr 1               
0001FFr 1  B2 84            lda (line2addr)
000201r 1  31 88            and (gemmask),Y
000203r 1  8D rr rr         sta square
000206r 1  B1 88            lda (gemmask),Y
000208r 1  49 FF            eor #$ff
00020Ar 1  2D rr rr         and gemAuxColour
00020Dr 1  0D rr rr         ora square
000210r 1  92 84            sta (line2addr)
000212r 1  C8               iny
000213r 1               
000213r 1  B2 86            lda (line3addr)
000215r 1  31 88            and (gemmask),Y
000217r 1  8D rr rr         sta square
00021Ar 1  B1 88            lda (gemmask),Y
00021Cr 1  49 FF            eor #$ff
00021Er 1  2D rr rr         and gemAuxColour
000221r 1  0D rr rr         ora square
000224r 1  92 86            sta (line3addr)
000226r 1  C8               iny
000227r 1               
000227r 1  9C rr rr         stz isAux
00022Ar 1               
00022Ar 1  80 48            bra @L7
00022Cr 1               
00022Cr 1               @L6:
00022Cr 1  8D 54 C0         sta LOWSCR
00022Fr 1  B2 82            lda (line1addr)
000231r 1  31 88            and (gemmask),Y
000233r 1  8D rr rr         sta square
000236r 1  B1 88            lda (gemmask),Y
000238r 1  49 FF            eor #$ff
00023Ar 1  2D rr rr         and gemColour
00023Dr 1  0D rr rr         ora square
000240r 1  92 82            sta (line1addr)
000242r 1  C8               iny
000243r 1               
000243r 1  B2 84            lda (line2addr)
000245r 1  31 88            and (gemmask),Y
000247r 1  8D rr rr         sta square
00024Ar 1  B1 88            lda (gemmask),Y
00024Cr 1  49 FF            eor #$ff
00024Er 1  2D rr rr         and gemColour
000251r 1  0D rr rr         ora square
000254r 1  92 84            sta (line2addr)
000256r 1  C8               iny
000257r 1               
000257r 1  B2 86            lda (line3addr)
000259r 1  31 88            and (gemmask),Y
00025Br 1  8D rr rr         sta square
00025Er 1  B1 88            lda (gemmask),Y
000260r 1  49 FF            eor #$ff
000262r 1  2D rr rr         and gemColour
000265r 1  0D rr rr         ora square
000268r 1  92 86            sta (line3addr)
00026Ar 1  C8               iny
00026Br 1               
00026Br 1  E6 82            inc line1addr
00026Dr 1  E6 84            inc line2addr
00026Fr 1  E6 86            inc line3addr
000271r 1               
000271r 1  EE rr rr         inc isAux
000274r 1               
000274r 1               @L7:
000274r 1  CA               dex
000275r 1  F0 03            beq @L2
000277r 1               
000277r 1  4C rr rr         jmp @L1
00027Ar 1               @L2:
00027Ar 1               
00027Ar 1  60               rts
00027Br 1               ; Locals
00027Br 1               
00027Br 1  00           xPos:         .BYTE $0
00027Cr 1  00           square:       .BYTE $0
00027Dr 1  00           gemColour:    .BYTE $0
00027Er 1  00           gemAuxColour: .BYTE $0
00027Fr 1  00           isAux:        .BYTE $0
000280r 1               .endproc
000280r 1               
000280r 1               
000280r 1               .proc _drawGem
000280r 1               ; A is the square position (from 0 to 63)
000280r 1               ; 0 through 7 are on the top row
000280r 1  8D rr rr         sta square
000283r 1               
000283r 1  29 07            and #7
000285r 1  0A               asl
000286r 1  0A               asl
000287r 1  0A               asl
000288r 1  AA               tax
000289r 1  AD rr rr         lda square
00028Cr 1               ; Need to divide by 8 to get the y square
00028Cr 1               ; and then multiply by 6 to get the y
00028Cr 1               ; position (0-47) on the screen.
00028Cr 1  4A               lsr
00028Dr 1  4A               lsr
00028Er 1  4A               lsr
00028Fr 1  8D rr rr         sta square
000292r 1  0A               asl
000293r 1  18               clc
000294r 1  6D rr rr         adc square
000297r 1  0A               asl
000298r 1  4C rr rr         jmp _drawGemAtXY
00029Br 1               ; Locals
00029Br 1               
00029Br 1  00           square:     .BYTE $0
00029Cr 1               .endproc
00029Cr 1               
00029Cr 1               
00029Cr 1               .proc _selectSquare
00029Cr 1  A0 00            ldy #0
00029Er 1  4C rr rr         jmp _drawGem
0002A1r 1               .endproc
0002A1r 1               
0002A1r 1               
0002A1r 1               .proc _starGemAtXY
0002A1r 1  8E rr rr         stx xPos
0002A4r 1  C9 00            cmp #0
0002A6r 1  10 0A            bpl @L4
0002A8r 1  4A               lsr
0002A9r 1  09 80            ora #$80
0002ABr 1  AA               tax
0002ACr 1  90 0C            bcc @L1
0002AEr 1  A9 F0            lda #$f0
0002B0r 1  80 0A            bra @L2
0002B2r 1               
0002B2r 1               @L4:
0002B2r 1  4A               lsr
0002B3r 1  AA               tax
0002B4r 1  90 04            bcc @L1
0002B6r 1  A9 F0            lda #$f0
0002B8r 1  80 02            bra @L2
0002BAr 1               @L1:
0002BAr 1  A9 0F            lda #$0f
0002BCr 1               @L2:
0002BCr 1  8D rr rr         sta starVal
0002BFr 1  E8               inx
0002C0r 1               
0002C0r 1  8D 54 C0         sta LOWSCR
0002C3r 1  AD rr rr         lda xPos
0002C6r 1  4A               lsr
0002C7r 1  A8               tay
0002C8r 1  90 04            bcc @L3
0002CAr 1  8D 55 C0         sta HISCR
0002CDr 1  C8               iny
0002CEr 1               @L3:
0002CEr 1  C8               iny
0002CFr 1  C8               iny
0002D0r 1  8C rr rr         sty xPos
0002D3r 1               
0002D3r 1               ; Get line addrs
0002D3r 1  BD rr rr         lda lineLoAddrs,X
0002D6r 1  18               clc
0002D7r 1  6D rr rr         adc xPos
0002DAr 1  85 84            sta line2addr
0002DCr 1  BD rr rr         lda lineHiAddrs,X
0002DFr 1  85 85            sta line2addr+1
0002E1r 1               
0002E1r 1  AD rr rr         lda starVal
0002E4r 1  12 84            ora (line2addr)
0002E6r 1  92 84            sta (line2addr)
0002E8r 1  60               rts
0002E9r 1               
0002E9r 1               ; Locals
0002E9r 1               
0002E9r 1  00           xPos:       .BYTE $0
0002EAr 1  00           square:     .BYTE $0
0002EBr 1  00           starVal:    .BYTE $0
0002ECr 1               
0002ECr 1               .endproc
0002ECr 1               
0002ECr 1               
0002ECr 1               .proc _drawAndStarGemAtXY
0002ECr 1  8E rr rr         stx xPos
0002EFr 1  8D rr rr         sta yPos
0002F2r 1  20 rr rr         jsr _drawGemAtXY
0002F5r 1  AE rr rr         ldx xPos
0002F8r 1  AD rr rr         lda yPos
0002FBr 1  4C rr rr         jmp _starGemAtXY
0002FEr 1               
0002FEr 1               ; Locals
0002FEr 1               
0002FEr 1  00           xPos:       .BYTE $0
0002FFr 1  00           yPos:       .BYTE $0
000300r 1               
000300r 1               .endproc
000300r 1               
000300r 1               
000300r 1               .proc _starGem
000300r 1               ; A is the square position (from 0 to 63)
000300r 1               ; 0 through 7 are on the top row
000300r 1  8D rr rr         sta square
000303r 1               
000303r 1  29 07            and #7
000305r 1  0A               asl
000306r 1  0A               asl
000307r 1  0A               asl
000308r 1  AA               tax
000309r 1  AD rr rr         lda square
00030Cr 1               ; Need to divide by 8 to get the y square
00030Cr 1               ; and then multiply by 3 to get the y
00030Cr 1               ; position (0-23) on the screen.
00030Cr 1  4A               lsr
00030Dr 1  4A               lsr
00030Er 1  4A               lsr
00030Fr 1  8D rr rr         sta square
000312r 1  0A               asl
000313r 1  18               clc
000314r 1  6D rr rr         adc square
000317r 1  0A               asl
000318r 1  4C rr rr         jmp _starGemAtXY
00031Br 1               
00031Br 1               ; Locals
00031Br 1               
00031Br 1  00           xPos:       .BYTE $0
00031Cr 1  00           square:     .BYTE $0
00031Dr 1               .endproc
00031Dr 1               
00031Dr 1               .proc _drawScore
00031Dr 1               ; A is a number from 0 to 24
00031Dr 1  A8               tay
00031Er 1  A2 18            ldx #24
000320r 1  A9 DD            lda #$dd
000322r 1  8D rr rr         sta color
000325r 1  8D 54 C0         sta LOWSCR
000328r 1               @L1:
000328r 1  CA               dex
000329r 1  30 1E            bmi @L2
00032Br 1  C0 00            cpy #0
00032Dr 1  D0 05            bne @L3
00032Fr 1  A9 22            lda #$22
000331r 1  8D rr rr         sta color
000334r 1               @L3:
000334r 1  88               dey
000335r 1               
000335r 1  BD rr rr         lda lineLoAddrs,X
000338r 1  18               clc
000339r 1  69 27            adc #39
00033Br 1  85 82            sta line1addr
00033Dr 1  BD rr rr         lda lineHiAddrs,X
000340r 1  85 83            sta line1addr+1
000342r 1               
000342r 1  AD rr rr         lda color
000345r 1  92 82            sta (line1addr)
000347r 1               
000347r 1  80 DF            bra @L1
000349r 1               
000349r 1               @L2:
000349r 1  60               rts
00034Ar 1               
00034Ar 1               ; Locals
00034Ar 1               
00034Ar 1  00           color:      .BYTE $0
00034Br 1               .endproc
00034Br 1               
00034Br 1               .proc _explodeGemFrame1
00034Br 1               ; A is the square position (from 0 to 63)
00034Br 1               ; 0 through 7 are on the top row
00034Br 1  8D rr rr         sta square
00034Er 1               
00034Er 1  29 07            and #7
000350r 1  0A               asl
000351r 1  0A               asl
000352r 1  8D rr rr         sta xPos
000355r 1  AD rr rr         lda square
000358r 1  4A               lsr
000359r 1  4A               lsr
00035Ar 1  4A               lsr
00035Br 1               
00035Br 1               ; Get line addrs
00035Br 1  AA               tax
00035Cr 1  BD rr rr         lda bgLoLines2,X
00035Fr 1  18               clc
000360r 1  6D rr rr         adc xPos
000363r 1  85 84            sta line2addr
000365r 1  BD rr rr         lda bgHiLines2,X
000368r 1  85 85            sta line2addr+1
00036Ar 1               
00036Ar 1  A0 00            ldy #0
00036Cr 1               @L1:
00036Cr 1                   ; Draw the frame
00036Cr 1  8D 55 C0         sta HISCR
00036Fr 1  B1 84            lda (line2addr),Y
000371r 1  09 0F            ora #$0f
000373r 1  91 84            sta (line2addr),Y
000375r 1  8D 54 C0         sta LOWSCR
000378r 1  B1 84            lda (line2addr),Y
00037Ar 1  09 0F            ora #$0f
00037Cr 1  91 84            sta (line2addr),Y
00037Er 1  C8               iny
00037Fr 1  C0 04            cpy #4
000381r 1  D0 E9            bne @L1
000383r 1               
000383r 1  60               rts
000384r 1               
000384r 1               ; Locals
000384r 1               
000384r 1  00           xPos:       .BYTE $0
000385r 1  00           square:     .BYTE $0
000386r 1               .endproc
000386r 1               
000386r 1               
000386r 1               .proc _explodeGemFrame2
000386r 1               ; A is the square position (from 0 to 63)
000386r 1               ; 0 through 7 are on the top row
000386r 1  8D rr rr         sta square
000389r 1               
000389r 1  29 07            and #7
00038Br 1  0A               asl
00038Cr 1  0A               asl
00038Dr 1  8D rr rr         sta xPos
000390r 1  AD rr rr         lda square
000393r 1  4A               lsr
000394r 1  4A               lsr
000395r 1  4A               lsr
000396r 1               
000396r 1               ; Get line addrs
000396r 1  AA               tax
000397r 1  BD rr rr         lda bgLoLines2,X
00039Ar 1  18               clc
00039Br 1  6D rr rr         adc xPos
00039Er 1  85 84            sta line2addr
0003A0r 1  BD rr rr         lda bgHiLines2,X
0003A3r 1  85 85            sta line2addr+1
0003A5r 1               
0003A5r 1                   ; Draw the frame
0003A5r 1  A9 FF            lda #$ff
0003A7r 1  A0 00            ldy #0
0003A9r 1               
0003A9r 1               @L1:
0003A9r 1  8D 55 C0         sta HISCR
0003ACr 1  91 84            sta (line2addr),Y
0003AEr 1  8D 54 C0         sta LOWSCR
0003B1r 1  91 84            sta (line2addr),Y
0003B3r 1               
0003B3r 1  C8               iny
0003B4r 1  C0 04            cpy #4
0003B6r 1  D0 F1            bne @L1
0003B8r 1               
0003B8r 1  60               rts
0003B9r 1               
0003B9r 1               ; Locals
0003B9r 1               
0003B9r 1  00           xPos:       .BYTE $0
0003BAr 1  00           square:     .BYTE $0
0003BBr 1               .endproc
0003BBr 1               
0003BBr 1               
0003BBr 1               .proc _explodeGemFrame3
0003BBr 1               ; A is the square position (from 0 to 63)
0003BBr 1               ; 0 through 7 are on the top row
0003BBr 1  8D rr rr         sta square
0003BEr 1               
0003BEr 1  29 07            and #7
0003C0r 1  0A               asl
0003C1r 1  0A               asl
0003C2r 1  8D rr rr         sta xPos
0003C5r 1  AD rr rr         lda square
0003C8r 1  4A               lsr
0003C9r 1  4A               lsr
0003CAr 1  4A               lsr
0003CBr 1               
0003CBr 1               ; Get line addrs
0003CBr 1  AA               tax
0003CCr 1  BD rr rr         lda bgLoLines1,X
0003CFr 1  18               clc
0003D0r 1  6D rr rr         adc xPos
0003D3r 1  85 82            sta line1addr
0003D5r 1  BD rr rr         lda bgHiLines1,X
0003D8r 1  85 83            sta line1addr+1
0003DAr 1               
0003DAr 1  A0 00            ldy #0
0003DCr 1               @L1:
0003DCr 1                   ; Draw the frame
0003DCr 1  8D 55 C0         sta HISCR
0003DFr 1  B1 82            lda (line1addr),Y
0003E1r 1  09 F0            ora #$f0
0003E3r 1  91 82            sta (line1addr),Y
0003E5r 1  8D 54 C0         sta LOWSCR
0003E8r 1  B1 82            lda (line1addr),Y
0003EAr 1  09 F0            ora #$f0
0003ECr 1  91 82            sta (line1addr),Y
0003EEr 1               
0003EEr 1  C8               iny
0003EFr 1  C0 04            cpy #4
0003F1r 1  D0 E9            bne @L1
0003F3r 1               
0003F3r 1  60               rts
0003F4r 1               
0003F4r 1               ; Locals
0003F4r 1               
0003F4r 1  00           xPos:       .BYTE $0
0003F5r 1  00           square:     .BYTE $0
0003F6r 1               .endproc
0003F6r 1               
0003F6r 1               
0003F6r 1               .proc _explodeGemFrame4
0003F6r 1               ; A is the square position (from 0 to 63)
0003F6r 1               ; 0 through 7 are on the top row
0003F6r 1  8D rr rr         sta square
0003F9r 1               
0003F9r 1  29 07            and #7
0003FBr 1  0A               asl
0003FCr 1  0A               asl
0003FDr 1  8D rr rr         sta xPos
000400r 1  AD rr rr         lda square
000403r 1  4A               lsr
000404r 1  4A               lsr
000405r 1  4A               lsr
000406r 1               
000406r 1               ; Get line addrs
000406r 1  AA               tax
000407r 1  BD rr rr         lda bgLoLines3,X
00040Ar 1  18               clc
00040Br 1  6D rr rr         adc xPos
00040Er 1  85 86            sta line3addr
000410r 1  BD rr rr         lda bgHiLines3,X
000413r 1  85 87            sta line3addr+1
000415r 1               
000415r 1  A0 00            ldy #0
000417r 1               @L1:
000417r 1                   ; Draw the frame
000417r 1  8D 55 C0         sta HISCR
00041Ar 1  B1 86            lda (line3addr),Y
00041Cr 1  09 0F            ora #$0f
00041Er 1  91 86            sta (line3addr),Y
000420r 1  8D 54 C0         sta LOWSCR
000423r 1  B1 86            lda (line3addr),Y
000425r 1  09 0F            ora #$0f
000427r 1  91 86            sta (line3addr),Y
000429r 1               
000429r 1  C8               iny
00042Ar 1  C0 04            cpy #4
00042Cr 1  D0 E9            bne @L1
00042Er 1               
00042Er 1  60               rts
00042Fr 1               
00042Fr 1               ; Locals
00042Fr 1               
00042Fr 1  00           xPos:       .BYTE $0
000430r 1  00           square:     .BYTE $0
000431r 1               .endproc
000431r 1               
000431r 1               
000431r 1               .proc _explodeGemFrame5
000431r 1               ; A is the square position (from 0 to 63)
000431r 1               ; 0 through 7 are on the top row
000431r 1  8D rr rr         sta square
000434r 1               
000434r 1  29 07            and #7
000436r 1  0A               asl
000437r 1  0A               asl
000438r 1  8D rr rr         sta xPos
00043Br 1  AD rr rr         lda square
00043Er 1  4A               lsr
00043Fr 1  4A               lsr
000440r 1  4A               lsr
000441r 1               
000441r 1               ; Get line addrs
000441r 1  AA               tax
000442r 1  BD rr rr         lda bgLoLines1,X
000445r 1  18               clc
000446r 1  6D rr rr         adc xPos
000449r 1  85 82            sta line1addr
00044Br 1  BD rr rr         lda bgHiLines1,X
00044Er 1  85 83            sta line1addr+1
000450r 1               
000450r 1                   ; Draw the frame
000450r 1  A9 FF            lda #$ff
000452r 1  A0 00            ldy #0
000454r 1               
000454r 1               @L1:
000454r 1  8D 55 C0         sta HISCR
000457r 1  91 82            sta (line1addr),Y
000459r 1  8D 54 C0         sta LOWSCR
00045Cr 1  91 82            sta (line1addr),Y
00045Er 1               
00045Er 1  C8               iny
00045Fr 1  C0 04            cpy #4
000461r 1  D0 F1            bne @L1
000463r 1               
000463r 1  60               rts
000464r 1               
000464r 1               ; Locals
000464r 1               
000464r 1  00           xPos:       .BYTE $0
000465r 1  00           square:     .BYTE $0
000466r 1               .endproc
000466r 1               
000466r 1               
000466r 1               .proc _explodeGemFrame6
000466r 1               ; A is the square position (from 0 to 63)
000466r 1               ; 0 through 7 are on the top row
000466r 1  8D rr rr         sta square
000469r 1               
000469r 1  29 07            and #7
00046Br 1  0A               asl
00046Cr 1  0A               asl
00046Dr 1  8D rr rr         sta xPos
000470r 1  AD rr rr         lda square
000473r 1  4A               lsr
000474r 1  4A               lsr
000475r 1  4A               lsr
000476r 1               
000476r 1               ; Get line addrs
000476r 1  AA               tax
000477r 1  BD rr rr         lda bgLoLines3,X
00047Ar 1  18               clc
00047Br 1  6D rr rr         adc xPos
00047Er 1  85 86            sta line3addr
000480r 1  BD rr rr         lda bgHiLines3,X
000483r 1  85 87            sta line3addr+1
000485r 1               
000485r 1                   ; Draw the frame
000485r 1  A9 FF            lda #$ff
000487r 1  A0 00            ldy #0
000489r 1               
000489r 1               @L1:
000489r 1  8D 55 C0         sta HISCR
00048Cr 1  91 86            sta (line3addr),Y
00048Er 1  8D 54 C0         sta LOWSCR
000491r 1  91 86            sta (line3addr),Y
000493r 1               
000493r 1  C8               iny
000494r 1  C0 04            cpy #4
000496r 1  D0 F1            bne @L1
000498r 1               
000498r 1  60               rts
000499r 1               
000499r 1               ; Locals
000499r 1               
000499r 1  00           xPos:       .BYTE $0
00049Ar 1  00           square:     .BYTE $0
00049Br 1               .endproc
00049Br 1               
00049Br 1               
00049Br 1               .DATA
000000r 1               
000000r 1               .align 64
000000r 1               
000000r 1               ; This block of bytes is used for writing to gems "above" the top of the screen.
000000r 1               ; Because we draw gems half off the screen, we have two fake lines above the
000000r 1               ; top of the screen which points to this buffer of 40 bytes (one line).
000000r 1               FakeLine:
000000r 1  00 00 00 00      .BYTE $0, $0, $0, $0, $0, $0, $0, $0
000004r 1  00 00 00 00  
000008r 1  00 00 00 00      .BYTE $0, $0, $0, $0, $0, $0, $0, $0
00000Cr 1  00 00 00 00  
000010r 1  00 00 00 00      .BYTE $0, $0, $0, $0, $0, $0, $0, $0
000014r 1  00 00 00 00  
000018r 1  00 00 00 00      .BYTE $0, $0, $0, $0, $0, $0, $0, $0
00001Cr 1  00 00 00 00  
000020r 1  00 00 00 00      .BYTE $0, $0, $0, $0, $0, $0, $0, $0
000024r 1  00 00 00 00  
000028r 1               
000028r 1               ; Prefix this array with two pointers to "fake lines"
000028r 1               fakeLineLoAddrs:
000028r 1  rr rr            .LOBYTES  FakeLine, FakeLine
00002Ar 1               lineLoAddrs:
00002Ar 1  00 80 00 80      .LOBYTES  LINE1,  LINE2,  LINE3,  LINE4,  LINE5,  LINE6,  LINE7,  LINE8
00002Er 1  00 80 00 80  
000032r 1  28 A8 28 A8      .LOBYTES  LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15, LINE16
000036r 1  28 A8 28 A8  
00003Ar 1  50 D0 50 D0      .LOBYTES LINE17, LINE18, LINE19, LINE20, LINE21, LINE22, LINE23, LINE24
00003Er 1  50 D0 50 D0  
000042r 1               
000042r 1               ; Prefix this array with two pointers to "fake lines"
000042r 1               fakeLineHiAddrs:
000042r 1  rr rr            .HIBYTES  FakeLine, FakeLine
000044r 1               lineHiAddrs:
000044r 1  04 04 05 05      .HIBYTES  LINE1,  LINE2,  LINE3,  LINE4,  LINE5,  LINE6,  LINE7,  LINE8
000048r 1  06 06 07 07  
00004Cr 1  04 04 05 05      .HIBYTES  LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15, LINE16
000050r 1  06 06 07 07  
000054r 1  04 04 05 05      .HIBYTES LINE17, LINE18, LINE19, LINE20, LINE21, LINE22, LINE23, LINE24
000058r 1  06 06 07 07  
00005Cr 1               
00005Cr 1               ; Index this with (xPos << 3) + yPos
00005Cr 1               bgColor:
00005Cr 1  00 55 00 55      .BYTE   $0, $55, $0, $55, $0, $55, $0, $55
000060r 1  00 55 00 55  
000064r 1  55 00 55 00      .BYTE   $55, $0, $55, $0, $55, $0, $55, $0
000068r 1  55 00 55 00  
00006Cr 1  00 55 00 55      .BYTE   $0, $55, $0, $55, $0, $55, $0, $55
000070r 1  00 55 00 55  
000074r 1  55 00 55 00      .BYTE   $55, $0, $55, $0, $55, $0, $55, $0
000078r 1  55 00 55 00  
00007Cr 1  00 55 00 55      .BYTE   $0, $55, $0, $55, $0, $55, $0, $55
000080r 1  00 55 00 55  
000084r 1  55 00 55 00      .BYTE   $55, $0, $55, $0, $55, $0, $55, $0
000088r 1  55 00 55 00  
00008Cr 1  00 55 00 55      .BYTE   $0, $55, $0, $55, $0, $55, $0, $55
000090r 1  00 55 00 55  
000094r 1  55 00 55 00      .BYTE   $55, $0, $55, $0, $55, $0, $55, $0
000098r 1  55 00 55 00  
00009Cr 1               
00009Cr 1               ; Index this with (xPos << 3) + yPos
00009Cr 1               bgAuxColor:
00009Cr 1  00 AA 00 AA      .BYTE   $0, $aa, $0, $aa, $0, $aa, $0, $aa
0000A0r 1  00 AA 00 AA  
0000A4r 1  AA 00 AA 00      .BYTE   $aa, $0, $aa, $0, $aa, $0, $aa, $0
0000A8r 1  AA 00 AA 00  
0000ACr 1  00 AA 00 AA      .BYTE   $0, $aa, $0, $aa, $0, $aa, $0, $aa
0000B0r 1  00 AA 00 AA  
0000B4r 1  AA 00 AA 00      .BYTE   $aa, $0, $aa, $0, $aa, $0, $aa, $0
0000B8r 1  AA 00 AA 00  
0000BCr 1  00 AA 00 AA      .BYTE   $0, $aa, $0, $aa, $0, $aa, $0, $aa
0000C0r 1  00 AA 00 AA  
0000C4r 1  AA 00 AA 00      .BYTE   $aa, $0, $aa, $0, $aa, $0, $aa, $0
0000C8r 1  AA 00 AA 00  
0000CCr 1  00 AA 00 AA      .BYTE   $0, $aa, $0, $aa, $0, $aa, $0, $aa
0000D0r 1  00 AA 00 AA  
0000D4r 1  AA 00 AA 00      .BYTE   $aa, $0, $aa, $0, $aa, $0, $aa, $0
0000D8r 1  AA 00 AA 00  
0000DCr 1               
0000DCr 1               bgLoLines1:
0000DCr 1  00 80 00 A8      .LOBYTES LINE1, LINE4, LINE7, LINE10, LINE13, LINE16, LINE19, LINE22
0000E0r 1  28 A8 50 D0  
0000E4r 1               bgLoLines2:
0000E4r 1  80 00 80 28      .LOBYTES LINE2, LINE5, LINE8, LINE11, LINE14, LINE17, LINE20, LINE23
0000E8r 1  A8 50 D0 50  
0000ECr 1               bgLoLines3:
0000ECr 1  00 80 28 A8      .LOBYTES LINE3, LINE6, LINE9, LINE12, LINE15, LINE18, LINE21, LINE24
0000F0r 1  28 D0 50 D0  
0000F4r 1               
0000F4r 1               bgHiLines1:
0000F4r 1  04 05 07 04      .HIBYTES LINE1, LINE4, LINE7, LINE10, LINE13, LINE16, LINE19, LINE22
0000F8r 1  06 07 05 06  
0000FCr 1               bgHiLines2:
0000FCr 1  04 06 07 05      .HIBYTES LINE2, LINE5, LINE8, LINE11, LINE14, LINE17, LINE20, LINE23
000100r 1  06 04 05 07  
000104r 1               bgHiLines3:
000104r 1  05 06 04 05      .HIBYTES LINE3, LINE6, LINE9, LINE12, LINE15, LINE18, LINE21, LINE24
000108r 1  07 04 06 07  
00010Cr 1               
00010Cr 1               
00010Cr 1               orangeMask:
00010Cr 1               greenMask:
00010Cr 1  FF FF FF         .BYTE $ff, $ff, $ff
00010Fr 1  FF 00 FF         .BYTE $ff, $00, $ff
000112r 1  0F 00 F0         .BYTE $0f, $00, $f0
000115r 1  0F 00 F0         .BYTE $0f, $00, $f0
000118r 1  0F 00 F0         .BYTE $0f, $00, $f0
00011Br 1  0F 00 F0         .BYTE $0f, $00, $f0
00011Er 1  FF 00 FF         .BYTE $ff, $00, $ff
000121r 1  FF FF FF         .BYTE $ff, $ff, $ff
000124r 1               
000124r 1               orangeMask2:
000124r 1               greenMask2:
000124r 1  FF FF FF         .BYTE $ff, $ff, $ff
000127r 1  FF 0F F0         .BYTE $ff, $0f, $f0
00012Ar 1  FF 00 00         .BYTE $ff, $00, $00
00012Dr 1  FF 00 00         .BYTE $ff, $00, $00
000130r 1  FF 00 00         .BYTE $ff, $00, $00
000133r 1  FF 00 00         .BYTE $ff, $00, $00
000136r 1  FF 0F F0         .BYTE $ff, $0f, $f0
000139r 1  FF FF FF         .BYTE $ff, $ff, $ff
00013Cr 1               
00013Cr 1               
00013Cr 1               greyMask:
00013Cr 1               purpleMask:
00013Cr 1  FF FF FF         .BYTE $ff, $ff, $ff
00013Fr 1  FF 0F F0         .BYTE $ff, $0f, $f0
000142r 1  FF 00 F0         .BYTE $ff, $00, $f0
000145r 1  0F 00 F0         .BYTE $0f, $00, $f0
000148r 1  0F 00 F0         .BYTE $0f, $00, $f0
00014Br 1  FF 00 F0         .BYTE $ff, $00, $f0
00014Er 1  FF 0F F0         .BYTE $ff, $0f, $f0
000151r 1  FF FF FF         .BYTE $ff, $ff, $ff
000154r 1               
000154r 1               
000154r 1               greyMask2:
000154r 1               purpleMask2:
000154r 1  FF FF FF         .BYTE $ff, $ff, $ff
000157r 1  FF FF 00         .BYTE $ff, $ff, $00
00015Ar 1  FF 0F 00         .BYTE $ff, $0f, $00
00015Dr 1  FF 00 00         .BYTE $ff, $00, $00
000160r 1  FF 00 00         .BYTE $ff, $00, $00
000163r 1  FF 0F 00         .BYTE $ff, $0f, $00
000166r 1  FF FF 00         .BYTE $ff, $ff, $00
000169r 1  FF FF FF         .BYTE $ff, $ff, $ff
00016Cr 1               
00016Cr 1               
00016Cr 1               specialMask:
00016Cr 1               yellowMask:
00016Cr 1  FF FF FF         .BYTE $ff, $ff, $ff
00016Fr 1  FF FF FF         .BYTE $ff, $ff, $ff
000172r 1  FF 00 FF         .BYTE $ff, $00, $ff
000175r 1  0F 00 F0         .BYTE $0f, $00, $f0
000178r 1  0F 00 F0         .BYTE $0f, $00, $f0
00017Br 1  FF 00 FF         .BYTE $ff, $00, $ff
00017Er 1  FF FF FF         .BYTE $ff, $ff, $ff
000181r 1  FF FF FF         .BYTE $ff, $ff, $ff
000184r 1               
000184r 1               
000184r 1               specialMask2:
000184r 1               yellowMask2:
000184r 1  FF FF FF         .BYTE $ff, $ff, $ff
000187r 1  FF FF FF         .BYTE $ff, $ff, $ff
00018Ar 1  FF 0F F0         .BYTE $ff, $0f, $f0
00018Dr 1  FF 00 00         .BYTE $ff, $00, $00
000190r 1  FF 00 00         .BYTE $ff, $00, $00
000193r 1  FF 0F F0         .BYTE $ff, $0f, $f0
000196r 1  FF FF FF         .BYTE $ff, $ff, $ff
000199r 1  FF FF FF         .BYTE $ff, $ff, $ff
00019Cr 1               
00019Cr 1               
00019Cr 1               blueMask:
00019Cr 1  FF FF FF         .BYTE $ff, $ff, $ff
00019Fr 1  FF F0 FF         .BYTE $ff, $f0, $ff
0001A2r 1  0F 00 FF         .BYTE $0f, $00, $ff
0001A5r 1  0F 00 F0         .BYTE $0f, $00, $f0
0001A8r 1  0F 00 F0         .BYTE $0f, $00, $f0
0001ABr 1  0F 00 FF         .BYTE $0f, $00, $ff
0001AEr 1  FF F0 FF         .BYTE $ff, $f0, $ff
0001B1r 1  FF FF FF         .BYTE $ff, $ff, $ff
0001B4r 1               
0001B4r 1               
0001B4r 1               blueMask2:
0001B4r 1  FF FF FF         .BYTE $ff, $ff, $ff
0001B7r 1  FF 0F FF         .BYTE $ff, $0f, $ff
0001BAr 1  FF 00 F0         .BYTE $ff, $00, $f0
0001BDr 1  FF 00 00         .BYTE $ff, $00, $00
0001C0r 1  FF 00 00         .BYTE $ff, $00, $00
0001C3r 1  FF 00 F0         .BYTE $ff, $00, $f0
0001C6r 1  FF 0F FF         .BYTE $ff, $0f, $ff
0001C9r 1  FF FF FF         .BYTE $ff, $ff, $ff
0001CCr 1               
0001CCr 1               
0001CCr 1               redMask:
0001CCr 1  FF FF FF         .BYTE $ff, $ff, $ff
0001CFr 1  0F 00 F0         .BYTE $0f, $00, $f0
0001D2r 1  0F 00 F0         .BYTE $0f, $00, $f0
0001D5r 1  0F 00 F0         .BYTE $0f, $00, $f0
0001D8r 1  0F 00 F0         .BYTE $0f, $00, $f0
0001DBr 1  0F 00 F0         .BYTE $0f, $00, $f0
0001DEr 1  0F 00 F0         .BYTE $0f, $00, $f0
0001E1r 1  FF FF FF         .BYTE $ff, $ff, $ff
0001E4r 1               
0001E4r 1               
0001E4r 1               redMask2:
0001E4r 1  FF FF FF         .BYTE $ff, $ff, $ff
0001E7r 1  FF 00 00         .BYTE $ff, $00, $00
0001EAr 1  FF 00 00         .BYTE $ff, $00, $00
0001EDr 1  FF 00 00         .BYTE $ff, $00, $00
0001F0r 1  FF 00 00         .BYTE $ff, $00, $00
0001F3r 1  FF 00 00         .BYTE $ff, $00, $00
0001F6r 1  FF 00 00         .BYTE $ff, $00, $00
0001F9r 1  FF FF FF         .BYTE $ff, $ff, $ff
0001FCr 1               
0001FCr 1               
0001FCr 1               selectMask:
0001FCr 1               selectMask2:
0001FCr 1  00 00 00         .BYTE $00, $00, $00
0001FFr 1  F0 FF 0F         .BYTE $f0, $ff, $0f
000202r 1  F0 FF 0F         .BYTE $f0, $ff, $0f
000205r 1  F0 FF 0F         .BYTE $f0, $ff, $0f
000208r 1  F0 FF 0F         .BYTE $f0, $ff, $0f
00020Br 1  F0 FF 0F         .BYTE $f0, $ff, $0f
00020Er 1  F0 FF 0F         .BYTE $f0, $ff, $0f
000211r 1  00 00 00         .BYTE $00, $00, $00
000214r 1               
000214r 1               
000214r 1               ; The order of these must match the defines for the gems in types.h.
000214r 1               ; I also reuse 0 to mean "select" which isn't a real gem type but I
000214r 1               ; draw it like a gem.
000214r 1               
000214r 1               maskLoAddrs:
000214r 1  rr rr rr rr      .LOBYTES selectMask, greenMask, redMask, purpleMask, orangeMask
000218r 1  rr           
000219r 1  rr rr rr rr      .LOBYTES greyMask, yellowMask, blueMask, specialMask
00021Dr 1               
00021Dr 1               maskHiAddrs:
00021Dr 1  rr rr rr rr      .HIBYTES selectMask, greenMask, redMask, purpleMask, orangeMask
000221r 1  rr           
000222r 1  rr rr rr rr      .HIBYTES greyMask, yellowMask, blueMask, specialMask
000226r 1               
000226r 1               maskLoAddrs2:
000226r 1  rr rr rr rr      .LOBYTES selectMask2, greenMask2, redMask2, purpleMask2, orangeMask2
00022Ar 1  rr           
00022Br 1  rr rr rr rr      .LOBYTES greyMask2, yellowMask2, blueMask2, specialMask2
00022Fr 1               
00022Fr 1               maskHiAddrs2:
00022Fr 1  rr rr rr rr      .HIBYTES selectMask2, greenMask2, redMask2, purpleMask2, orangeMask2
000233r 1  rr           
000234r 1  rr rr rr rr      .HIBYTES greyMask2, yellowMask2, blueMask2, specialMask2
000238r 1               
000238r 1               gemColours:
000238r 1  FF               .BYTE $ff   ; select "gem" colour
000239r 1  CC               .BYTE $cc   ; green gem colour
00023Ar 1  11               .BYTE $11   ; red gem colour
00023Br 1  33               .BYTE $33   ; purple gem colour
00023Cr 1  99               .BYTE $99   ; orange gem colour
00023Dr 1  22               .BYTE $22   ; grey gem colour
00023Er 1  DD               .BYTE $dd   ; yellow gem colour
00023Fr 1  66               .BYTE $66   ; blue gem colour
000240r 1  FF               .BYTE $ff   ; special gem colour
000241r 1               gemAuxColours:
000241r 1  FF               .BYTE $ff   ; select "gem" colour
000242r 1  66               .BYTE $66   ; green gem colour
000243r 1  88               .BYTE $88   ; red gem colour
000244r 1  99               .BYTE $99   ; purple gem colour
000245r 1  CC               .BYTE $cc   ; orange gem colour
000246r 1  11               .BYTE $11   ; grey gem colour
000247r 1  EE               .BYTE $ee   ; yellow gem colour
000248r 1  33               .BYTE $33   ; blue gem colour
000249r 1  FF               .BYTE $ff   ; special gem colour
000249r 1               
